#!/usr/bin/python
import sys
import ROOT 
import numpy as np
from ROOT import TLorentzVector
import csv
from ROOT import TFile, TTree
from rootpy.io import root_open
from rootpy.tree import Tree, TreeChain
from rootpy.plotting import Hist, Hist2D
from rootpy.extern.six.moves import range

if len(sys.argv) < 2:
  print " Usage: Example1.py input_file"
  sys.exit(1)

ROOT.gSystem.Load("/home/felipe/madanalysis5_1_5/tools/delphes/libDelphes")
inputFile = sys.argv[1]

# Create chain of root trees
chain1 = ROOT.TChain("Delphes")
chain1.Add(inputFile)

# Create object of class ExRootTreeReader
treeReader = ROOT.ExRootTreeReader(chain1)
numberOfEntries = treeReader.GetEntries()

# create new root file
root_name = raw_input("name of new root: ")
f = root_open(root_name, "recreate")
tree = Tree("test")
tree.create_branches({'PT_l1': 'F',
	'PT_l2': 'F',
	'PT_ll': 'F',
        'Cos_lZ': 'F',
	'DPHI_ll': 'F',
	'PT_j1': 'F',
	'PT_j2': 'F',
	'PT_b1': 'F',
	'PT_b2': 'F',
        'Eta_H': 'F',
        'phi_H': 'F',
        'M_H': 'F',
        'Cos_Hb1': 'F',
	'PT_H': 'F',
	'PT_ZH': 'F',
	'M_Z': 'F',
	'M_ZH': 'F'
	})

# Get pointers to branches used in this analysis
branchJet = treeReader.UseBranch("Jet")
branchElectron = treeReader.UseBranch("Electron")
branchMuon = treeReader.UseBranch("Muon")
branchPhoton = treeReader.UseBranch("Photon")
branchMET = treeReader.UseBranch("MissingET")
# Loop over all events
for entry in range(0, numberOfEntries):
  # Load selected branches with data from specified event
	treeReader.ReadEntry(entry)
	branchJet = sorted(branchJet, key=lambda Jet: Jet.PT)
	jet1 = branchJet[0]
	jet2 = branchJet[1]
	jato1 = ROOT.TLorentzVector()
	jato2 = ROOT.TLorentzVector()
	jato1.SetPtEtaPhiE(jet1.P4().Pt(),jet1.P4().Eta(),jet1.P4().Phi(),jet1.P4().E())
	jato2.SetPtEtaPhiE(jet2.P4().Pt(),jet2.P4().Eta(),jet2.P4().Phi(),jet2.P4().E())
	eletrons = sorted(branchElectron, key=lambda Electron: Electron.PT)
	elec1 = eletrons[0]
	elec2 = eletrons[1]
	eletron1 = ROOT.TLorentzVector()
	eletron2 = ROOT.TLorentzVector()
	eletron1.SetPtEtaPhiE(elec1.PT,elec1.Eta,elec1.Phi,elec1.P4().E())
	eletron2.SetPtEtaPhiE(elec2.PT,elec2.Eta,elec2.Phi,elec2.P4().E())
	Z = ROOT.TLorentzVector()
	H = ROOT.TLorentzVector()
	ZH = ROOT.TLorentzVector()
        tree.PT_j1 = (jato1).Pt()
        tree.PT_j2 = (jato2).Pt()
###################################################################################################
	bjets = sorted(branchJet, key=lambda Jet: Jet.BTag == 1)
	bjets = sorted(bjets, key=lambda BJet: BJet.PT)
        bjato1 = ROOT.TLorentzVector()
        bjato2 = ROOT.TLorentzVector()
        bjato1.SetPtEtaPhiE(bjets[0].PT,bjets[0].Eta,bjets[0].Phi,bjets[0].P4().E())
        bjato2.SetPtEtaPhiE(bjets[1].PT,bjets[1].Eta,bjets[1].Phi,bjets[1].P4().E())
        if 115 < (bjato1 + bjato2).M() < 135:
		Z = (eletron1 + eletron2)
		Ztob = ROOT.TLorentzVector()
		Ztob.SetPxPyPzE(Z.Px(),Z.Py(),Z.Pz(),Z.E())
		Zboost = ROOT.TVector3()
		Zboost = Ztob.BoostVector()
		v = Zboost.Unit()
		eletron1.Boost(-Zboost)
		ZH = Z + H
		H = ROOT.TLorentzVector()
		H = (bjato1 + bjato2)
		Htob = ROOT.TLorentzVector()
		Htob.SetPxPyPzE(H.Px(),H.Py(),H.Pz(),H.E())
		Hboost = ROOT.TVector3()
		Hboost = Htob.BoostVector()
		ang = Hboost.Unit()
		bjato1.Boost(-Hboost)
		tree.phi_H = H.Phi()
		tree.Cos_Hb1 = np.cos(bjato1.Angle(ang))
		tree.PT_ZH = ZH.Pt()
		tree.M_ZH = Z.M() + H.M()
		tree.PT_b1 = (bjato1).Pt()
		tree.PT_b2 = (bjato2).Pt()
		tree.PT_H = H.Pt()
		tree.Eta_H = H.Eta()
		tree.M_H = H.M()
		tree.M_Z = Z.M()
		tree.PT_l1 = (eletron1).Pt()
		tree.PT_l2 = (eletron2).Pt()
		tree.DPHI_ll = np.abs(eletron1.DeltaPhi(eletron2))
		tree.PT_ll = (eletron1 + eletron2).Pt()
		tree.Cos_lZ = np.cos(eletron1.Angle(v))
	tree.Fill()


# Show resulting histograms
#hist_PT_l1.Draw()
#raw_input("Press Enter to continue...")
tree.write()
f.close()

